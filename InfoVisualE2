<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>D3: SVG bar chart with value labels (centered)</title>
    <script type="text/javascript" src="d3.v3.js"></script>
    <style type="text/css">
        rect:hover {
            fill: red;
        }
    </style>
</head>
<body>

<div title="text">Click on this text to scale the height of the chart.</div>

<script type="text/javascript">

    //Width and height
    var width = 500;
    var height = 250;
    var barPadding = 10;

    var dataset = [
        [5, 23, 75],
        [10, 14, 34],
        [13, 67, 23],
        [19, 10, 65],
        [21, 42, 29],
        [25, 25, 25],
        [22, 90, 30],
        [18, 57, 17],
        [15, 25, 35],
        [13, 26, 39],
        [11, 17, 85],
        [12, 36, 24],
        [15, 60, 45],
        [20, 41, 11],
        [18, 77, 33],
        [17, 85, 55],
        [16, 23, 44],
        [18, 35, 23],
        [23, 55, 15],
        [25, 45, 100]
    ];

    var xScale = d3.scale.ordinal().domain(d3.range(dataset.length)).rangeRoundBands([barPadding, width - barPadding], 0.05);

    var yScale = d3.scale.linear().domain([0, d3.max(dataset, function (d) {
        return d[0];
    })]).range([barPadding, height - barPadding]);

    //Create SVG element
    var svg = d3.select("body")
            .append("svg")
            .attr("width", width)
            .attr("height", height);

    svg.selectAll("rect")
            .data(dataset)
            .enter()
            .append("rect")
            .attr("x", function (d, i) {
                return xScale(i);
            })
            .attr("y", function (d) {
                return height - yScale(d[0]);
            })
            .attr("width", function (d) {
                return xScale.rangeBand() * (d[1] / 100);
            })
            .attr("height", function (d) {
                return yScale(d[0]);
            })
            .attr("fill", function (d) {
                return "rgb(0, 0, 200)";
            })
            .attr("fill-opacity", function (d) {
                return 0.25 + (0.75 * (d[2] / 100));
            })
            .on("click", function () {
                sort();
            });

    svg.selectAll("text")
            .data(dataset)
            .enter()
            .append("text")
            .text(function (d) {
                return d[0];
            })
            .attr("text-anchor", "left")
            .attr("x", function (d, i) {
                return xScale(i);
            })
            .attr("y", function (d) {
                return height - yScale(d[0]) - 2;
            })
            .attr("font-family", "sans-serif")
            .attr("font-size", "11px")
            .attr("fill", "red");

    var scaleIndex = 0, sortIndex = 0;

    d3.select("div").on("click", function () {

        switch (scaleIndex++) {
            case 0:
                yScale.domain([0, d3.max(dataset, function (d) {
                    return d[0] * 3 / 2;
                })]);
                break;

            case 1:
                yScale.domain([0, d3.max(dataset, function (d) {
                    return d[0] * 3;
                })]);
                break;

            case 2:
                yScale.domain([0, d3.max(dataset, function (d) {
                    return d[0];
                })]);
                scaleIndex = 0;
                break;
        }

        svg.selectAll("text")
                .transition()
                .delay(function (d, i) {
                    return i / dataset.length * 1000;
                })
                .duration(500)
                .ease("linear")
                .attr("y", function (d) {
                    return height - yScale(d[0]) - 2;
                })

                .attr("height", function (d) {
                    return yScale(d[0]);
                });

        svg.selectAll("rect")
                .transition()
                .delay(function (d, i) {
                    return i / dataset.length * 1000;
                })
                .duration(500)
                .ease("linear")
                .attr("y", function (d) {
                    return height - yScale(d[0]);
                })

                .attr("height", function (d) {
                    return yScale(d[0]);
                });
    });

    var sort = function () {

        if (sortIndex++ == 2) {
            sortIndex = 0;
        }

        svg.selectAll("text")
                .sort(function (a, b) {
                    return d3.ascending(a[sortIndex], b[sortIndex]);
                })
                .transition()
                .delay(function (d, i) {
                    return i / dataset.length * 1000;
                })
                .duration(500)
                .ease("linear")
                .text(function (d) {
                    return d[sortIndex];
                })
                .attr("x", function (d, i) {
                    return xScale(i);
                })
                .attr("y", function (d) {
                    return height - yScale(d[0]) - 2;
                });

        svg.selectAll("rect")
                .sort(function (a, b) {
                    return d3.ascending(a[sortIndex], b[sortIndex]);
                })
                .transition()
                .delay(function (d, i) {
                    return i / dataset.length * 1000;
                })
                .duration(500)
                .ease("linear")
                .attr("x", function (d, i) {
                    return xScale(i);
                })
                .attr("y", function (d) {
                    return height - yScale(d[0]);
                })
                .attr("height", function (d) {
                    return yScale(d[0]);
                });
    }

</script>
</body>
</html>
